ARG BASE_IMAGE=nvidia/cuda:12.8.1-cudnn-devel-ubuntu22.04 \
    PYTHON_VERSION=3.12

FROM "${BASE_IMAGE}"

ARG PYTHON_VERSION

# Set Bash as the default shell
SHELL ["/bin/bash", "-c"]

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHON_VERSION="${PYTHON_VERSION}" \
    SHELL="/bin/bash" \
    UV_PYTHON="${PYTHON_VERSION}" \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    PATH="/workspace/.venv/bin:/root/.local/bin:/usr/local/bin:${PATH}" \
    VIRTUAL_ENV="/workspace/.venv" \
    PYTHONPATH="/workspace/ComfyUI:/workspace/.venv/lib/python${PYTHON_VERSION}/site-packages"

# System dependencies
RUN apt update && apt install -yqq --no-install-recommends \
    git \
    wget \
    curl \
    nano \
    socat \
    libsndfile1 \
    build-essential \
    llvm \
    tk-dev \
    libglvnd-dev \
    cmake \
    swig \
    libprotobuf-dev \
    protobuf-compiler \
    ffmpeg \
    python3 \
    python3-pip \
    python3-venv \
    curl \
    && rm -rf /var/lib/apt/lists/*

#enable opengl support with nvidia gpu
RUN printf '%s\n' \
  '{' \
  '    "file_format_version" : "1.0.0",' \
  '    "ICD" : {' \
  '        "library_path" : "libEGL_nvidia.so.0"' \
  '    }' \
  '}' > /usr/share/glvnd/egl_vendor.d/10_nvidia.json

# Install uv package manager
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Install Python and setup virtual environment using uv
RUN mkdir -p /workspace/comfystream && \
    uv python install "${PYTHON_VERSION}" && \
    cd /workspace && \
    uv venv .venv --python="${PYTHON_VERSION}" && \
    echo 'activate_venv() { if [ -f ".venv/bin/activate" ] && [ "$VIRTUAL_ENV" != "$(pwd)/.venv" ]; then . ".venv/bin/activate"; fi; };' >> ~/.bashrc && \
    echo 'PROMPT_COMMAND="activate_venv; $PROMPT_COMMAND"' >> ~/.bashrc

# Ensure pip exists inside the venv for tools that shell out to `python -m pip`
RUN /workspace/.venv/bin/python -m ensurepip --upgrade && \
    /workspace/.venv/bin/python -m pip install -U pip setuptools wheel && \
    /workspace/.venv/bin/python -m pip --version

# Install comfy-cli using uv
RUN uv pip install comfy-cli

# Copy only files needed for setup
COPY ./src/comfystream/scripts /workspace/comfystream/src/comfystream/scripts
COPY ./configs /workspace/comfystream/configs

RUN mkdir -p /workspace

# Install ComfyUI using comfy-cli
RUN comfy --skip-prompt --workspace /workspace/ComfyUI install --skip-torch-or-directml --nvidia

# Copy ComfyStream files into ComfyUI
COPY . /workspace/comfystream

RUN cd /workspace/comfystream && uv pip install -r ./src/comfystream/scripts/overrides.txt

# Copy comfystream and example workflows to ComfyUI
COPY ./workflows/comfyui/* /workspace/ComfyUI/user/default/workflows/
COPY ./test/example-512x512.png /workspace/ComfyUI/input

# Install ComfyUI requirements (probably not needed)
# RUN cd /workspace/ComfyUI && uv pip install -r requirements.txt

# Install ComfyStream requirements
RUN ln -s /workspace/comfystream /workspace/ComfyUI/custom_nodes/comfystream
RUN cd /workspace/comfystream && uv pip install -e .
RUN cd /workspace/comfystream && python install.py --workspace /workspace/ComfyUI

# Accept a build-arg that lets CI force-invalidate setup_nodes.py
ARG CACHEBUST=static
ENV CACHEBUST=${CACHEBUST}

# Run setup_nodes (removing to promote user node installation)
#RUN cd /workspace/comfystream && python src/comfystream/scripts/setup_nodes.py --workspace /workspace/ComfyUI

#RUN uv pip install "numpy<2.0.0"
#RUN uv pip install --no-cache-dir xformers==0.0.30 --no-deps

# Set default Python environment with auto-uv-env and ensure .bashrc is sourced
RUN echo 'source ~/.bashrc' >> ~/.bash_profile && \
    echo 'if [ -f ~/.bashrc ]; then source ~/.bashrc; fi' >> ~/.profile

# Ensure bash is used by default for interactive shells
ENV BASH_ENV=/root/.bashrc

WORKDIR /workspace/comfystream
