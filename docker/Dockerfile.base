ARG BASE_IMAGE=nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
ARG CONDA_VERSION=latest
ARG PYTHON_VERSION=3.11
ARG CUDA_ARCH_BIN="8.0"

# ---- STAGE 1: Cuda OpenCV builder ----
FROM ${BASE_IMAGE} AS builder

ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

RUN apt-get update && apt-get install -y --no-install-recommends \
    tzdata \
    build-essential cmake git pkg-config \
    libjpeg-dev libpng-dev libtiff-dev \
    libavcodec-dev libavformat-dev libswscale-dev \
    libv4l-dev libxvidcore-dev libx264-dev \
    libgtk-3-dev libcanberra-gtk* \
    libatlas-base-dev gfortran \
    wget curl unzip \
    zlib1g-dev libncurses5-dev libncursesw5-dev \
    libreadline-dev libsqlite3-dev \
    libssl-dev libbz2-dev libffi-dev \
    liblzma-dev uuid-dev tk-dev libc6-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt
RUN git clone -b 4.11.0 https://github.com/opencv/opencv.git
RUN git clone -b 4.11.0 https://github.com/opencv/opencv_contrib.git

# Install pyenv and Python 3.11.7 with shared libs
RUN curl https://pyenv.run | bash && \
    export PYENV_ROOT="/root/.pyenv" && \
    export PATH="$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PYENV_ROOT/plugins/python-build/bin:$PATH" && \
    pyenv install --verbose 3.11.7 && \
    pyenv global 3.11.7 && \
    echo 'export PYENV_ROOT="/root/.pyenv"' >> ~/.bashrc && \
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc && \
    echo 'eval "$(pyenv init -)"' >> ~/.bashrc && \
    echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc && \
    pip install --upgrade pip numpy

ENV PATH="/root/.pyenv/shims:/root/.pyenv/bin:$PATH"
ENV PYTHON_EXECUTABLE="/root/.pyenv/versions/3.11.7/bin/python"

RUN mkdir -p /opt/opencv/build && cd /opt/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX="/opt/opencv-install" \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D WITH_CUDA=ON \
        -D WITH_CUDNN=ON \
        -D CUDA_ARCH_BIN=${CUDA_ARCH_BIN} \
        -D CUDA_ARCH_PTX=${CUDA_ARCH_BIN} \
        -D WITH_CUBLAS=ON \
        -D ENABLE_FAST_MATH=ON \
        -D CUDA_FAST_MATH=ON \
        -D OPENCV_DNN_CUDA=ON \
        -D BUILD_opencv_cudacodec=ON \
        -D BUILD_opencv_python3=ON \
        -D BUILD_opencv_python2=OFF \
        -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
        -D INSTALL_PYTHON_EXAMPLES=OFF \
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_opencv_world=ON \
        .. && \
        make VERBOSE=1 -j"${NUM_JOBS}" && \
        make install

# ---- STAGE 2: base image ----
FROM ${BASE_IMAGE} AS final

# Copy OpenCV artifacts from builder
COPY --from=builder /opt/opencv-install /usr/local

ARG CONDA_VERSION \
    PYTHON_VERSION

ENV DEBIAN_FRONTEND=noninteractive \
    CONDA_VERSION="${CONDA_VERSION}" \
    PATH="/workspace/miniconda3/bin:${PATH}" \
    PYTHON_VERSION="${PYTHON_VERSION}"

# System dependencies
RUN apt update && apt install -yqq \
    git \
    wget \
    nano \
    socat \
    libsndfile1 \
    build-essential llvm tk-dev && \
    rm -rf /var/lib/apt/lists/*

# Conda setup
RUN mkdir -p /workspace/comfystream && \
    wget "https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh" -O /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -b -p /workspace/miniconda3 && \
    eval "$(/workspace/miniconda3/bin/conda shell.bash hook)" && \
    conda create -n comfystream python="${PYTHON_VERSION}" ffmpeg=6 -c conda-forge -y && \
    rm /tmp/miniconda.sh && echo 'export LD_LIBRARY_PATH=/workspace/miniconda3/envs/comfystream/lib:$LD_LIBRARY_PATH' >> ~/.bashrc

# Clone ComfyUI
RUN git clone https://github.com/comfyanonymous/ComfyUI.git /workspace/ComfyUI

# Copy only files needed for setup
COPY ./src/comfystream/scripts /workspace/comfystream/src/comfystream/scripts
COPY ./configs /workspace/comfystream/configs

# Copy ComfyStream files into ComfyUI
COPY . /workspace/comfystream

# Copy comfystream and example workflows to ComfyUI
COPY ./workflows/comfyui/* /workspace/ComfyUI/user/default/workflows/
COPY ./test/example-512x512.png /workspace/ComfyUI/input

# Install ComfyUI requirements
RUN conda run -n comfystream --no-capture-output --cwd /workspace/ComfyUI pip install -r requirements.txt --root-user-action=ignore

# Install ComfyStream requirements
RUN ln -s /workspace/comfystream /workspace/ComfyUI/custom_nodes/comfystream
RUN conda run -n comfystream --no-capture-output --cwd /workspace/comfystream pip install -e . --root-user-action=ignore
RUN conda run -n comfystream --no-capture-output --cwd /workspace/comfystream python install.py --workspace /workspace/ComfyUI

# Run setup_nodes
RUN conda run -n comfystream --no-capture-output --cwd /workspace/comfystream python src/comfystream/scripts/setup_nodes.py --workspace /workspace/ComfyUI

# Install additional dependencies
RUN conda run -n comfystream --no-capture-output pip install --upgrade tensorrt-cu12-bindings tensorrt-cu12-libs --root-user-action=ignore

# Configure no environment activation by default
RUN conda config --set auto_activate_base false && \
    conda init bash

# Set comfystream environment as default
RUN echo "conda activate comfystream" >> ~/.bashrc

WORKDIR /workspace/comfystream
