---
- name: Setup ComfyUI with Comfystream
  hosts: all
  become: yes
  vars:
    docker_image: "livepeer/comfystream:v0.1.0"
    comfyui_username: "comfyadmin"
  tasks:
    ###################################################################
    # 0. Ensure Cloud Init Completion and APT Readiness
    ###################################################################
    - block:
        # TODO: Uncomment when tensordock cloud-init is fixed.
        - name: Ensure cloud-init has completed successfully
          command: cloud-init status --wait
          register: cloud_init_result
          retries: 30
          delay: 30
          changed_when: false
          failed_when: cloud_init_result.rc != 0
        - name: Wait for apt to be available
          apt:
            update_cache: yes
          register: apt_result
          retries: 50
          delay: 10
          until: apt_result is success
    ###################################################################
    # 1. Password Generation & Connection Check
    ###################################################################
    - name: Set ComfyUI password (static if provided, random if empty)
      set_fact:
        comfyui_password: "{{ comfyui_password | default(lookup('password', '/dev/null length=32 chars=ascii_letters,digits')) }}"
    - name: Wait for VM to be ready
      wait_for_connection:
        timeout: 300
        delay: 5
    ###################################################################
    # 2. Docker CE Installation (Only if not installed)
    ###################################################################
    - name: Check if Docker is installed
      stat:
        path: /usr/bin/docker
      register: docker_check
    - name: Install Docker CE (official method) if not installed
      block:
        - name: Install Docker prerequisites
          apt:
            name:
              - ca-certificates
              - curl
            state: present
            update_cache: yes
        - name: Create Docker keyring directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: "0755"
        - name: Download Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: "0644"
            force: yes
        - name: Add Docker APT repository
          shell: |
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
          args:
            executable: /bin/bash
        - name: Update APT cache
          apt:
            update_cache: yes
        - name: Install Docker CE and related plugins
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
        - name: Ensure Docker is running and enabled
          systemd:
            name: docker
            state: started
            enabled: yes
        - name: Add user to Docker group
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes
      # when: docker_check.rc != 0
      when: not docker_check.stat.exists
    ###################################################################
    # 3. NVIDIA Driver Check
    ###################################################################
    - block:
        - name: Check if nvidia-smi is working
          command: nvidia-smi
          register: nvidia_smi_result
          changed_when: false
          ignore_errors: yes
        - name: Reboot machine if NVIDIA drivers not ready
          reboot:
            msg: "Rebooting to initialize NVIDIA drivers"
            connect_timeout: 5
            reboot_timeout: 600
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: whoami
          when: nvidia_smi_result.rc != 0
        - name: Wait for system after reboot
          wait_for_connection:
            timeout: 300
            delay: 5
          when: nvidia_smi_result.rc != 0
        - name: Confirm nvidia-smi post-reboot
          command: nvidia-smi
          register: nvidia_smi_post_reboot_result
          retries: 6
          delay: 10
          until: nvidia_smi_post_reboot_result.rc == 0
          changed_when: false
          failed_when: nvidia_smi_post_reboot_result.rc != 0
          when: nvidia_smi_result.rc != 0
    ###################################################################
    # 4. ComfyUI Auth Setup
    ###################################################################
    - block:
        - name: Install python3-passlib
          apt:
            name: python3-passlib
            state: present
            update_cache: yes
          retries: 5
          delay: 30
        - name: Generate bcrypt hash on remote
          shell: python3 -c "from passlib.hash import bcrypt; print(bcrypt.hash('{{ comfyui_password }}'))"
          register: remote_hash_result
          changed_when: false
          no_log: true
        - name: Set password hash fact
          set_fact:
            password_hash: "{{ remote_hash_result.stdout }}"
        - name: Display access credentials
          debug:
            msg:
              - "ComfyUI username: {{ comfyui_username }}"
              - "ComfyUI password: {{ comfyui_password }}"
    ###################################################################
    # 5. Caddy Reverse Proxy Setup
    ###################################################################
    - block:
        - name: Add Caddy GPG key
          apt_key:
            url: https://dl.cloudsmith.io/public/caddy/stable/gpg.key
            keyring: /usr/share/keyrings/caddy-stable-archive-keyring.gpg
            state: present
        - name: Download Caddy repo definition
          get_url:
            url: https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt
            dest: /etc/apt/sources.list.d/caddy-stable.list
            mode: "0644"
        - name: Install Caddy and OpenSSL
          apt:
            name:
              - caddy
              - openssl
            update_cache: yes
            state: present
        - name: Create cert directory
          file:
            path: /etc/caddy/certificates
            state: directory
            mode: "0750"
            owner: caddy
            group: caddy
        - name: Generate self-signed SSL certificate
          command: >
            openssl req -x509 -newkey rsa:4096
            -keyout /etc/caddy/certificates/selfsigned.key
            -out /etc/caddy/certificates/selfsigned.crt
            -days 365 -nodes
            -subj "/C=US/ST=State/L=City/O=Company/OU=Org/CN=localhost"
          args:
            creates: /etc/caddy/certificates/selfsigned.crt
          notify: restart caddy
        - name: Set ownership on certs
          file:
            path: "{{ item }}"
            owner: caddy
            group: caddy
            mode: "0640"
          loop:
            - /etc/caddy/certificates/selfsigned.key
            - /etc/caddy/certificates/selfsigned.crt
          notify: restart caddy
        - name: Add ComfyUI Caddy config
          template:
            src: ../../templates/comfyui.caddy.j2
            dest: /etc/caddy/comfyui.caddy
            owner: caddy
            group: caddy
            mode: "0644"
          notify: restart caddy
        - name: Ensure Caddyfile imports ComfyUI config
          lineinfile:
            path: /etc/caddy/Caddyfile
            line: "import /etc/caddy/comfyui.caddy"
            create: yes
          notify: restart caddy
    ###################################################################
    # 6. NVIDIA Container Toolkit
    ###################################################################
    - block:
        - name: Check if NVIDIA Container Toolkit is installed
          stat:
            path: /usr/bin/nvidia-container-toolkit
          register: nvidia_toolkit_installed
        - name: Check if NVIDIA runtime is configured in Docker
          shell: docker info | grep -i nvidia
          register: nvidia_runtime_configured
          changed_when: false
          failed_when: false
        - name: Add NVIDIA repo key
          apt_key:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            keyring: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
            state: present
          when: not nvidia_toolkit_installed.stat.exists
        - name: Add NVIDIA repo list
          get_url:
            url: https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list
            dest: /etc/apt/sources.list.d/nvidia-container-toolkit.list
            mode: "0644"
          when: not nvidia_toolkit_installed.stat.exists
        - name: Patch NVIDIA repo to use signed key
          replace:
            path: /etc/apt/sources.list.d/nvidia-container-toolkit.list
            regexp: "^deb https://"
            replace: "deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://"
          when: not nvidia_toolkit_installed.stat.exists
        - name: Install NVIDIA Container Toolkit
          apt:
            name: nvidia-container-toolkit
            update_cache: yes
            state: present
          retries: 5
          delay: 30
          register: nvidia_toolkit_result
          until: nvidia_toolkit_result is success
          when: not nvidia_toolkit_installed.stat.exists
        - name: Configure Docker to use NVIDIA runtime
          command: nvidia-ctk runtime configure --runtime=docker
          register: nvidia_ctk_result
          changed_when: nvidia_ctk_result.rc == 0
          when: nvidia_runtime_configured.rc != 0
        - name: Restart Docker
          systemd:
            name: docker
            state: restarted
            enabled: yes
          when: nvidia_runtime_configured.rc != 0
    ###################################################################
    # 7. ComfyStream Docker Setup
    ###################################################################
    - block:
        - name: Install community.docker collection
          command: ansible-galaxy collection install community.docker
          delegate_to: localhost
          run_once: true
          become: no
        - name: Create ComfyUI model and output directories
          file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "{{ ansible_env.HOME }}/models/ComfyUI--models"
            - "{{ ansible_env.HOME }}/models/ComfyUI--output"
        - name: Check Docker Hub credentials
          set_fact:
            docker_login_required: "{{ docker_hub_username | default('') | length > 0 and docker_hub_password | default('') | length > 0 }}"
        - name: Docker login (if needed)
          community.docker.docker_login:
            username: "{{ docker_hub_username }}"
            password: "{{ docker_hub_password }}"
          become: yes
          when: docker_login_required
          register: docker_login_result
          ignore_errors: yes
        - name: Pull ComfyStream image (may take a while)
          community.docker.docker_image:
            name: "{{ docker_image }}"
            source: pull
        - name: Docker logout (if logged in)
          community.docker.docker_login:
            state: absent
          become: yes
          when: docker_login_required and docker_login_result is succeeded
        - name: Run ComfyStream container
          community.docker.docker_container:
            name: comfystream
            image: "{{ docker_image }}"
            state: started
            restart_policy: unless-stopped
            stop_timeout: 300
            device_requests:
              - driver: nvidia
                count: -1 # Use all GPUs
                capabilities:
                  - [gpu]
            volumes:
              - "{{ ansible_env.HOME }}/models/ComfyUI--models:/workspace/ComfyUI/models"
              - "{{ ansible_env.HOME }}/models/ComfyUI--output:/workspace/ComfyUI/output"
            ports:
              - "3000:3000"
              - "8188:8188"
              - "8889:8889"
            command: "--download-models --build-engines --server"
        - name: Display ComfyUI access message
          debug:
            msg: "ComfyStream is starting up. downloading models, and building TensorRT engines—this may take a while. Access ComfyUI when ready at https://{{ ansible_default_ipv4.address }}:<COMFYUIPort>."
  handlers:
    - name: restart caddy
      systemd:
        name: caddy
        state: restarted
